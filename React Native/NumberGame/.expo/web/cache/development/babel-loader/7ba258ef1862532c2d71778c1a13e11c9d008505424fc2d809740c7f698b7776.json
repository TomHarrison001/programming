{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RandomNumber from \"./RandomNumber\";\nimport shuffle from \"lodash.shuffle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Game = function (_React$Component) {\n  _inherits(Game, _React$Component);\n  var _super = _createSuper(Game);\n  function Game() {\n    var _this;\n    _classCallCheck(this, Game);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      selectedIds: [],\n      remainingSeconds: _this.props.initialSeconds\n    };\n    _this.gameStatus = \"PLAYING\";\n    _this.randomNumbers = Array.from({\n      length: _this.props.randomNumberCount\n    }).map(function () {\n      return 1 + Math.floor(10 * Math.random());\n    });\n    _this.target = _this.randomNumbers.slice(0, _this.props.randomNumberCount - 2).reduce(function (acc, curr) {\n      return acc + curr;\n    }, 0);\n    _this.shuffledRandomNumbers = shuffle(_this.randomNumbers);\n    _this.isNumberSelected = function (numberIndex) {\n      return _this.state.selectedIds.indexOf(numberIndex) >= 0;\n    };\n    _this.selectNumber = function (numberIndex) {\n      _this.setState(function (prevState) {\n        return {\n          selectedIds: [].concat(_toConsumableArray(prevState.selectedIds), [numberIndex])\n        };\n      });\n    };\n    _this.calcGameStatus = function (nextState) {\n      var sumSelected = nextState.selectedIds.reduce(function (acc, curr) {\n        return acc + _this.shuffledRandomNumbers[curr];\n      }, 0);\n      if (nextState.remainingSeconds === 0) {\n        return \"LOST\";\n      }\n      if (sumSelected < _this.target) {\n        return \"PLAYING\";\n      }\n      if (sumSelected === _this.target) {\n        return \"WON\";\n      }\n      if (sumSelected > _this.target) {\n        return \"LOST\";\n      }\n    };\n    return _this;\n  }\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      this.intervalId = setInterval(function () {\n        _this2.setState(function (prevState) {\n          return {\n            remainingSeconds: prevState.remainingSeconds - 1\n          };\n        }, function () {\n          if (_this2.state.remainingSeconds === 0) {\n            clearInterval(_this2.intervalId);\n          }\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalId);\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      if (nextState.selectedIds !== this.state.selectedIds || nextState.remainingSeconds === 0) {\n        this.gameStatus = this.calcGameStatus(nextState);\n        if (this.gameStatus !== \"PLAYING\") {\n          clearInterval(this.intervalId);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var gameStatus = this.gameStatus;\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(Text, {\n          style: [styles.target, styles[`STATUS_${gameStatus}`]],\n          children: this.target\n        }), _jsx(View, {\n          style: styles.randomContainer,\n          children: this.shuffledRandomNumbers.map(function (randomNumber, index) {\n            return _jsx(RandomNumber, {\n              id: index,\n              number: randomNumber,\n              isDisabled: _this3.isNumberSelected(index) || gameStatus !== \"PLAYING\",\n              onPress: _this3.selectNumber\n            }, index);\n          })\n        }), this.gameStatus !== \"PLAYING\" && _jsx(Button, {\n          title: \"Play Again\",\n          onPress: this.props.onPlayAgain\n        }), _jsx(Text, {\n          children: this.state.remainingSeconds\n        })]\n      });\n    }\n  }]);\n  return Game;\n}(React.Component);\nGame.propTypes = {\n  randomNumberCount: PropTypes.number.isRequired,\n  initialSeconds: PropTypes.number.isRequired,\n  onPlayAgain: PropTypes.func.isRequired\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#ddd\",\n    flex: 1\n  },\n  target: {\n    fontSize: 50,\n    margin: 50,\n    textAlign: \"center\"\n  },\n  randomContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\"\n  },\n  STATUS_PLAYING: {\n    backgroundColor: \"#bbb\"\n  },\n  STATUS_WON: {\n    backgroundColor: \"green\"\n  },\n  STATUS_LOST: {\n    backgroundColor: \"red\"\n  }\n});\nexport default Game;","map":{"version":3,"names":["React","PropTypes","View","Text","Button","StyleSheet","RandomNumber","shuffle","jsx","_jsx","jsxs","_jsxs","Game","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","selectedIds","remainingSeconds","props","initialSeconds","gameStatus","randomNumbers","from","randomNumberCount","map","Math","floor","random","target","slice","reduce","acc","curr","shuffledRandomNumbers","isNumberSelected","numberIndex","indexOf","selectNumber","setState","prevState","_toConsumableArray","calcGameStatus","nextState","sumSelected","_createClass","key","value","componentDidMount","_this2","intervalId","setInterval","clearInterval","componentWillUnmount","componentWillUpdate","nextProps","render","_this3","style","styles","container","children","randomContainer","randomNumber","index","id","number","isDisabled","onPress","title","onPlayAgain","Component","propTypes","isRequired","func","create","backgroundColor","flex","fontSize","margin","textAlign","flexDirection","flexWrap","justifyContent","STATUS_PLAYING","STATUS_WON","STATUS_LOST"],"sources":["D:/Homework/Languages and Frameworks/React Native/NumberGame/Game.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { View, Text, Button, StyleSheet } from \"react-native\";\r\n\r\nimport RandomNumber from \"./RandomNumber\";\r\nimport shuffle from \"lodash.shuffle\"; // npm i lodash.shuffle\r\n\r\nclass Game extends React.Component {\r\n  static propTypes = {\r\n    randomNumberCount: PropTypes.number.isRequired,\r\n    initialSeconds: PropTypes.number.isRequired,\r\n    onPlayAgain: PropTypes.func.isRequired,\r\n  };\r\n  state = {\r\n    selectedIds: [],\r\n    remainingSeconds: this.props.initialSeconds,\r\n  };\r\n  gameStatus = \"PLAYING\";\r\n  randomNumbers = Array.from({ length: this.props.randomNumberCount }).map(\r\n    () => 1 + Math.floor(10 * Math.random())\r\n  );\r\n  target = this.randomNumbers\r\n    .slice(0, this.props.randomNumberCount - 2)\r\n    .reduce((acc, curr) => acc + curr, 0);\r\n  shuffledRandomNumbers = shuffle(this.randomNumbers);\r\n\r\n  componentDidMount() {\r\n    this.intervalId = setInterval(() => {\r\n      this.setState(\r\n        (prevState) => {\r\n          return { remainingSeconds: prevState.remainingSeconds - 1 };\r\n        },\r\n        () => {\r\n          if (this.state.remainingSeconds === 0) {\r\n            clearInterval(this.intervalId);\r\n          }\r\n        }\r\n      );\r\n    }, 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalId);\r\n  }\r\n  isNumberSelected = (numberIndex) => {\r\n    return this.state.selectedIds.indexOf(numberIndex) >= 0;\r\n  };\r\n  selectNumber = (numberIndex) => {\r\n    this.setState((prevState) => ({\r\n      selectedIds: [...prevState.selectedIds, numberIndex],\r\n    }));\r\n  };\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if (\r\n      nextState.selectedIds !== this.state.selectedIds ||\r\n      nextState.remainingSeconds === 0\r\n    ) {\r\n      this.gameStatus = this.calcGameStatus(nextState);\r\n      if (this.gameStatus !== \"PLAYING\") {\r\n        clearInterval(this.intervalId);\r\n      }\r\n    }\r\n  }\r\n  calcGameStatus = (nextState) => {\r\n    const sumSelected = nextState.selectedIds.reduce((acc, curr) => {\r\n      return acc + this.shuffledRandomNumbers[curr];\r\n    }, 0);\r\n    if (nextState.remainingSeconds === 0) {\r\n      return \"LOST\";\r\n    }\r\n    if (sumSelected < this.target) {\r\n      return \"PLAYING\";\r\n    }\r\n    if (sumSelected === this.target) {\r\n      return \"WON\";\r\n    }\r\n    if (sumSelected > this.target) {\r\n      return \"LOST\";\r\n    }\r\n  };\r\n  render() {\r\n    const gameStatus = this.gameStatus;\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text style={[styles.target, styles[`STATUS_${gameStatus}`]]}>\r\n          {this.target}\r\n        </Text>\r\n        <View style={styles.randomContainer}>\r\n          {this.shuffledRandomNumbers.map((randomNumber, index) => (\r\n            <RandomNumber\r\n              key={index}\r\n              id={index}\r\n              number={randomNumber}\r\n              isDisabled={\r\n                this.isNumberSelected(index) || gameStatus !== \"PLAYING\"\r\n              }\r\n              onPress={this.selectNumber}\r\n            />\r\n          ))}\r\n        </View>\r\n        {this.gameStatus !== \"PLAYING\" && (\r\n          <Button title=\"Play Again\" onPress={this.props.onPlayAgain} />\r\n        )}\r\n        <Text>{this.state.remainingSeconds}</Text>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: \"#ddd\",\r\n    flex: 1,\r\n  },\r\n  target: {\r\n    fontSize: 50,\r\n    margin: 50,\r\n    textAlign: \"center\",\r\n  },\r\n  randomContainer: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n\r\n  STATUS_PLAYING: {\r\n    backgroundColor: \"#bbb\",\r\n  },\r\n  STATUS_WON: {\r\n    backgroundColor: \"green\",\r\n  },\r\n  STATUS_LOST: {\r\n    backgroundColor: \"red\",\r\n  },\r\n});\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}